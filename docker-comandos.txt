Facade, Strategy, Observer, Composite

Volumenes, carpetas compartidades con el ordenaror u otro ordenador

docker run imagen (ejecutar por primera vez)
docker run -it --name mycontainer image
docker start (arrancar contenedor ya creado con nombre)
docker ps (lista containers)
docker ps -a (lista los que estan y los que no estan corriendo)
docker stop <id> parar contanedor
docker images (lista de imagenes docker)
docker run repo/simple-webapp
docker run -i kodekloud/simple-prompt-docker "i" parameter
docker run -v /opt/datadir:/var/lib/mysql mysql (para persistir los datos)
docker run -e ENVIRONMENT_VARIABLE images
--eliminar contenedores e images
docker stop <id>
docker container rm <id>
docker rm image
--Puertos en docker
docker run -it --name mitest -p 8080:8080 nginx (corremos una imagen en un puerto 8080) -it para mostrar en consola





-----------------------------------
DockerFile
FROM UBUNTU

RUN apt-get update
RUN apt-get install python

RUN pip install flask
RUN pip install flask-mysql

COPY . /opt/source-code

ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run

--image size low
FROM UBUNTU

RUN apt-get update
RUN apt-get install python

RUN pip install flask
RUN pip install flask-mysql

COPY app2.py /opt/source-code

ENTRYPOINT FLASK_APP=/opt/source-code/app2.py flask run

-- Docker run contenedor para aplicacion docker-compose.yml
docker run -d --name=redis redis
docker run -d --name=db postgres:9.4 --link db:db result-app
docker run -d --name=vote -p 5000:80 --link redis:redis voting-app
docker run -d --name=result -p 5001:80
docker run -d --name=worwer worker

--Example docker-compose
version:2
services:
	redis:
		image:redis
	db:
		image:postgres:9.4
	vote:
		image: ./vote (folder code source or voting-app)
		ports:
			-5000:80
	depens_on:
		-redis
docker compose -build (construya las imagenes)

¿¿Diferencia entre hacer un pull o un run??
Una imagen es una plantilla, un contenedor es una ejecución individual


# construccion a partir de Dockerfile en go
docker build -t main .  #ejecutamos el main, y creamos archivo ejecutable
docker build -t items-api 
docker run -o 8081:8081 -p 9200:9200 items-api:latest  (con elasticsearch en 9200)

--Docker build a partir de Dockerfile
docker build -t cls .
 